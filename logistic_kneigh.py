# -*- coding: utf-8 -*-
"""Logistic-Kneigh

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u_KBGzYI_UDwwu1hW-K-fTZJS9crsnF1
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import pylab as pl
import numpy as np
import scipy.optimize as opt
from sklearn import preprocessing
# %matplotlib inline 
import matplotlib.pyplot as plt

#Download data
!wget -O ChurnData.csv https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-ML0101EN-Coursera/labs/Data_files/ChurnData.csv

#Load data
churn_df = pd.read_csv("ChurnData.csv")
churn_df.head()

churn_df = churn_df[['tenure', 'age', 'address', 'income', 'ed', 'employ', 'equip',   'callcard', 'wireless','churn']]

#we change the target data type to be integer, as it is a requirement by the skitlearn algorithm
churn_df['churn'] = churn_df['churn'].astype('int')
churn_df.head()

churn_df.shape #we have 200 rows (customers) and 10 columns (criteria)

#Defining X and y for our dataset
#We turned the desired portions of the tables into arrays of numbers
X = np.asarray(churn_df[['tenure', 'age', 'address', 'income', 'ed', 'employ', 'equip']])
X[0:5] #Used to preview 6 rows of the array

y = np.asarray(churn_df['churn'])
#y represents the labels, just classyfing between if the customer left or not

#Normalize data, only needs to be done for X
from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X)
X[0:5]

#Split into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=4) #20% of data will be used for testing
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

#Building LogisticRegression model from Scikit-learn package

#The version of Logistic Regression in Scikit-learn, supports regularization. 
#Regularization is a technique used to solve the overfitting problem in machine learning models. 

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix
LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train) #C parameter indicates inverse of regularization strength which must be a positive float. 
#Smaller values specify stronger regularization
LR

#Now we can predict using our test set
yhat = LR.predict(X_test)
yhat

#predict_proba returns estimates for all classes, ordered by the label of classes. 
#So, the first column is the probability of class 1, P(Y=1|X), and second column is probability of class 0, P(Y=0|X)
yhat_prob = LR.predict_proba(X_test)
yhat_prob

#Evaluation

#Lets try jaccard index for accuracy evaluation. we can define jaccard as the size of the intersection divided by the size of the union of two label sets. 
#If the entire set of predicted labels for a sample strictly match with the true set of labels, then the subset accuracy is 1.0; otherwise it is 0.0.

from sklearn.metrics import jaccard_similarity_score
jaccard_similarity_score(y_test, yhat)

#Evaluation with log-loss

from sklearn.metrics import log_loss
log_loss(y_test, yhat_prob)

from sklearn.neighbors import KNeighborsClassifier

k = 9
#Train Model and Predict  
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
neigh

from sklearn import metrics
print("Train set Accuracy: ", metrics.accuracy_score(y_train, neigh.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, yhat))

